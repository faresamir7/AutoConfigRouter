Metadata-Version: 2.1
Name: fireREST
Version: 1.0.10
Summary: Python api client for firepower management center
Home-page: https://github.com/kaisero/fireREST.git
Author: Oliver Kaiser
Author-email: oliver.kaiser@outlook.com
License: UNKNOWN
Keywords: cisco firepower fmc ftd fpr api rest python api
Platform: UNKNOWN
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Information Technology
Classifier: License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Operating System :: POSIX
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: packaging (>=20.3)
Requires-Dist: requests (>=2.23.0)
Requires-Dist: retry (>=0.9.2)
Requires-Dist: simplejson (>=3.17.2)
Requires-Dist: urllib3 (>=1.25.8)

[![python3](https://img.shields.io/badge/python-3.7+-blue.svg)](https://github.com/kaisero/fireREST/) [![pypi](https://img.shields.io/pypi/v/fireREST)](https://pypi.org/project/fireREST/) [![license](https://img.shields.io/badge/license-GPL%20v3.0-brightgreen.svg)](https://github.com/kaisero/fireREST/blob/master/LICENSE) [![status](https://img.shields.io/badge/status-beta-blue.svg)](https://github.com/kaisero/fireREST/) [![published](https://static.production.devnetcloud.com/codeexchange/assets/images/devnet-published.svg)](https://developer.cisco.com/codeexchange/github/repo/kaisero/fireREST)


# FireREST

FireREST is a python library to interface with Cisco Firepower Management Center REST API. The goal of FireREST is to provide a simple SDK to programmatically interact with FMC.

## Features

* Authentication and automatic session refresh / re-authentication
* Rate-limit detection and automatic backoff and retry behavior
* Automatic squashing of paginated api payloads
* Sanitization of api payloads for create and update operations (automatically remove unsupported elements like links, metadata from payload)
* Detailed logging of api requests and responses
* API specific error handling using various custom exceptions for typical errors (e.g. ResourceAlreadyExists, UnprocessAbleEntityError, ...)
* Support for resource lookup by name instead of uuid for all CRUD operations

## Requirements

* Python >= 3.7

## Quickstart

### Installation

```bash
> pip install fireREST
```

### Import api client

```python
from fireREST import FMC
```

### Authentication

FireREST uses basic authentication. In case your authentication token times out, the api client will automatically refresh the session and retry
a failed operation. If all 3 refresh tokens have been used up the connection object will try to re-authenticate again automatically.

```python
fmc = FMC(hostname='fmc.example.com', username='firerest', password='Cisco123', domain='Global')
```

> **_NOTE:_**  By default domain is set to `Global`

### CRUD Operations

#### Objects

##### Create network object

```python
net_obj = {
    'name': 'NetObjViaAPI',
    'value': '198.18.1.0/24',
}

response = fmc.object.network.create(data=net_obj)
```

> **_NOTE:_**  in case a resource supports the `bulk` option `FireREST` will automatically perform a bulk operation if the `data` provided is of type `list`

##### Get all network objects

```python
net_objects = fmc.object.network.get()
```

##### Get specific network object

```python
net_objects = fmc.object.network.get(name='NetObjViaAPI')
```

> **_NOTE:_** You can access a resource either by `name` or `uuid`. If the resource supports a filtering by name FireREST will utilize the filter option, in case
> a Resource does not support filter params it will iterate through all resources to find a match

##### Update network object

```python
net_obj = fmc.object.network.get(name='NetObjViaAPI')
net_obj['name'] = 'RenamedNetObjViaAPI'
response = fmc.object.network.update(data=net_obj)
```

> **_NOTE:_**  FireREST automatically extracts the `id` field of the provided data `dict` to update the correct resource.

##### Delete network object

```python
response = fmc.object.network.delete(name='NetObjViaAPI')
```

## Supported operations

Since FireREST does not try to provide a python object model nearly all api calls up to version 6.7.0 are available which includes but is not limited to
the following CRUD operations:

```
â”œâ”€â”€ assignment
â”‚   â””â”€â”€ policyassignment
â”œâ”€â”€ audit
â”‚   â””â”€â”€ auditrecord
â”œâ”€â”€ deployment
â”‚   â”œâ”€â”€ deployabledevice
â”‚   â”‚   â”œâ”€â”€ deployment
â”‚   â”‚   â””â”€â”€ pendingchanges
â”‚   â”œâ”€â”€ deploymentrequest
â”‚   â”œâ”€â”€ jobhistory
â”‚   â””â”€â”€ rollbackrequest
â”œâ”€â”€ device
â”‚   â””â”€â”€ devicerecord
â”‚       â”œâ”€â”€ bridgegroupinterface
â”‚       â”œâ”€â”€ etherchannelinterface
â”‚       â”œâ”€â”€ fpinterfacestatistics
â”‚       â”œâ”€â”€ fplogicalinterface
â”‚       â”œâ”€â”€ fpphysicalinterface
â”‚       â”œâ”€â”€ inlineset
â”‚       â”œâ”€â”€ interfaceevent
â”‚       â”œâ”€â”€ operational
â”‚       â”‚   â”œâ”€â”€ command
â”‚       â”‚   â””â”€â”€ metric
â”‚       â”œâ”€â”€ physicalinterface
â”‚       â”œâ”€â”€ redundantinterface
â”‚       â”œâ”€â”€ routing
â”‚       â”‚   â”œâ”€â”€ bgp
â”‚       â”‚   â”œâ”€â”€ bgpgeneralsettings
â”‚       â”‚   â”œâ”€â”€ ipv4staticroute
â”‚       â”‚   â”œâ”€â”€ ipv6staticroute
â”‚       â”‚   â”œâ”€â”€ ospfinterface
â”‚       â”‚   â”œâ”€â”€ ospfv2route
â”‚       â”‚   â”œâ”€â”€ ospfv3interface
â”‚       â”‚   â”œâ”€â”€ staticroute
â”‚       â”‚   â””â”€â”€ virtualrouter
â”‚       â”œâ”€â”€ subinterface
â”‚       â”œâ”€â”€ virtualswitch
â”‚       â”œâ”€â”€ virtualtunnelinterface
â”‚       â””â”€â”€ vlaninterface
â”œâ”€â”€ devicecluster
â”‚   â””â”€â”€ ftddevicecluster
â”œâ”€â”€ devicegroup
â”‚   â””â”€â”€ devicegrouprecord
â”œâ”€â”€ devicehapair
â”‚   â””â”€â”€ ftddevicehapair
â”‚       â”œâ”€â”€ failoverinterfacemacaddressconfig
â”‚       â””â”€â”€ monitoredinterface
â”œâ”€â”€ health
â”‚   â”œâ”€â”€ alert
â”‚   â””â”€â”€ metric
â”œâ”€â”€ integration
â”‚   â”œâ”€â”€ cloudeventsconfig
â”‚   â”œâ”€â”€ cloudregion
â”‚   â”œâ”€â”€ externallookup
â”‚   â””â”€â”€ externalstorage
â”œâ”€â”€ intelligence
â”‚   â”œâ”€â”€ taxiiconfig
â”‚   â”‚   â”œâ”€â”€ collection
â”‚   â”‚   â””â”€â”€ discoveryinfo
â”‚   â””â”€â”€ tid
â”‚       â”œâ”€â”€ element
â”‚       â”œâ”€â”€ incident
â”‚       â”œâ”€â”€ indicator
â”‚       â”œâ”€â”€ observable
â”‚       â”œâ”€â”€ setting
â”‚       â””â”€â”€ source
â”œâ”€â”€ job
â”‚   â””â”€â”€ taskstatus
â”œâ”€â”€ object
â”‚   â”œâ”€â”€ anyprotocolportobject
â”‚   â”œâ”€â”€ application
â”‚   â”œâ”€â”€ applicationcategory
â”‚   â”œâ”€â”€ applicationfilter
â”‚   â”œâ”€â”€ applicationproductivities
â”‚   â”œâ”€â”€ applicationrisk
â”‚   â”œâ”€â”€ applicationtag
â”‚   â”œâ”€â”€ applicationtype
â”‚   â”œâ”€â”€ aspathlist
â”‚   â”œâ”€â”€ certenrollment
â”‚   â”œâ”€â”€ communitylist
â”‚   â”œâ”€â”€ continent
â”‚   â”œâ”€â”€ country
â”‚   â”œâ”€â”€ dnsservergroup
â”‚   â”œâ”€â”€ endpointdevicetype
â”‚   â”œâ”€â”€ expandedcommunitylist
â”‚   â”œâ”€â”€ extendedaccesslist
â”‚   â”œâ”€â”€ fqdn
â”‚   â”‚   â””â”€â”€ override
â”‚   â”œâ”€â”€ geolocation
â”‚   â”œâ”€â”€ globaltimezone
â”‚   â”œâ”€â”€ host
â”‚   â”‚   â””â”€â”€ override
â”‚   â”œâ”€â”€ icmpv4object
â”‚   â”‚   â””â”€â”€ override
â”‚   â”œâ”€â”€ icmpv6object
â”‚   â”‚   â””â”€â”€ override
â”‚   â”œâ”€â”€ ikev1ipsecproposal
â”‚   â”œâ”€â”€ ikev1policy
â”‚   â”œâ”€â”€ ikev2ipsecproposal
â”‚   â”œâ”€â”€ ikev2policy
â”‚   â”œâ”€â”€ interface
â”‚   â”œâ”€â”€ interfacegroup
â”‚   â”œâ”€â”€ ipv4prefixlist
â”‚   â”œâ”€â”€ ipv6prefixlist
â”‚   â”œâ”€â”€ isesecuritygrouptag
â”‚   â”œâ”€â”€ keychain
â”‚   â”‚   â””â”€â”€ override
â”‚   â”œâ”€â”€ network
â”‚   â”‚   â””â”€â”€ override
â”‚   â”œâ”€â”€ networkaddress
â”‚   â”œâ”€â”€ networkgroup
â”‚   â”‚   â””â”€â”€ override
â”‚   â”œâ”€â”€ policylist
â”‚   â”œâ”€â”€ port
â”‚   â”œâ”€â”€ portobjectgroup
â”‚   â”‚   â””â”€â”€ override
â”‚   â”œâ”€â”€ protocolportobject
â”‚   â”‚   â””â”€â”€ override
â”‚   â”œâ”€â”€ range
â”‚   â”‚   â””â”€â”€ override
â”‚   â”œâ”€â”€ realmuser
â”‚   â”œâ”€â”€ realmusergroup
â”‚   â”œâ”€â”€ routemap
â”‚   â”œâ”€â”€ securitygrouptag
â”‚   â”œâ”€â”€ securityzone
â”‚   â”œâ”€â”€ siurlfeed
â”‚   â”œâ”€â”€ siurllist
â”‚   â”œâ”€â”€ slamonitor
â”‚   â”œâ”€â”€ standardaccesslist
â”‚   â”œâ”€â”€ standardcommunitylist
â”‚   â”œâ”€â”€ timerange
â”‚   â”œâ”€â”€ timezone
â”‚   â”‚   â””â”€â”€ override
â”‚   â”œâ”€â”€ tunneltag
â”‚   â”œâ”€â”€ url
â”‚   â”‚   â””â”€â”€ override
â”‚   â”œâ”€â”€ urlcategory
â”‚   â”œâ”€â”€ urlgroup
â”‚   â”‚   â””â”€â”€ override
â”‚   â”œâ”€â”€ variableset
â”‚   â”œâ”€â”€ vlangrouptag
â”‚   â”‚   â””â”€â”€ override
â”‚   â””â”€â”€ vlantag
â”‚       â””â”€â”€ override
â”œâ”€â”€ policy
â”‚   â”œâ”€â”€ accesspolicy
â”‚   â”‚   â”œâ”€â”€ accessrule
â”‚   â”‚   â”œâ”€â”€ category
â”‚   â”‚   â”œâ”€â”€ defaultaction
â”‚   â”‚   â”œâ”€â”€ inheritancesettings
â”‚   â”‚   â”œâ”€â”€ loggingsettings
â”‚   â”‚   â””â”€â”€ operational
â”‚   â”‚       â””â”€â”€ hitcounts
â”‚   â”œâ”€â”€ filepolicy
â”‚   â”œâ”€â”€ ftdnatpolicy
â”‚   â”‚   â”œâ”€â”€ autonatrule
â”‚   â”‚   â”œâ”€â”€ manualnatrule
â”‚   â”‚   â””â”€â”€ natrule
â”‚   â”œâ”€â”€ ftds2svpn
â”‚   â”‚   â”œâ”€â”€ advancedsettings
â”‚   â”‚   â”œâ”€â”€ endpoint
â”‚   â”‚   â”œâ”€â”€ ikesettings
â”‚   â”‚   â””â”€â”€ ipsecsettings
â”‚   â”œâ”€â”€ intrusionpolicy
â”‚   â”‚   â””â”€â”€ intrusionrule
â”‚   â”œâ”€â”€ prefilterpolicy
â”‚   â”‚   â”œâ”€â”€ defaultaction
â”‚   â”‚   â”œâ”€â”€ operational
â”‚   â”‚   â”‚   â””â”€â”€ hitcounts
â”‚   â”‚   â””â”€â”€ prefilterrule
â”‚   â”œâ”€â”€ snmpalert
â”‚   â””â”€â”€ syslogalert
â”œâ”€â”€ system
â”‚   â””â”€â”€ info
â”‚       â”œâ”€â”€ domain
â”‚       â””â”€â”€ serverversion
â”œâ”€â”€ update
â”‚   â””â”€â”€ upgradepackage
â”‚       â””â”€â”€ applicabledevice
â””â”€â”€ user
    â”œâ”€â”€ authrole
    â””â”€â”€ ssoconfig
```

## Troubleshooting

### UnprocessableEntityError

You might see an `UnprocessableEntityError` exception when you try to execute  `CREATE`or `UPDATE` operations. Depending on the API endpoint the error message from FMC might not contain enough information to pinpoint what is causing the issue. In this case I would recommend using `pigtail` on FMC to get more detailed information.

#### Example

In this example we are trying to create an object override, but the field `value` is invalid. The subnet mask chosen is not correct, which will cause the FMC API to respond with an UnprocessAbleEntity error.

````bash
data = {
    "overrides": {
        "parent": {
            "id": "00505699-76B7-0ed3-0000-077309525737"
        },
        "target": {
            "id": "0ff8161e-096e-11eb-8ec0-cb721f246e60",
            "type": "Device"
        }
    },
    "value": "198.18.201.0/241",
    "name": "NetObjWithOverrides",
    "id": "00505699-76B7-0ed3-0000-077309525737"
}
fmc.object.network.update(data=data)
````

On FMC we can use the `pigtail` utility to tail the logfile on the Tomcat webserver hosting the REST API. Using this method we can monitor the APIs response and get some additional information on the error

````bash
> expert
admin@fmc:/Volume/home/admin# sudo su -
root@fmc:/Volume/home/admin# pigtail TCAT
````

Here we see that a Java exception has been thrown, indicating that the request failed due an invalid ip address being passed

```
TCAT: 02-02 15:36:33 INFO: 172.21.100.145	-	-	443	PUT	/api/fmc_config/v1/domain/b76ff587-9224-65c7-d2af-000000000000/object/networks/00505699-76B7-0ed3-0000-077309525737	-	400	-	301	169	https://fmc.example.com	FireREST/1.0.0	-
TCAT: 02-02 15:34:33 [ajp-nio-127.0.0.1-9009-exec-1] ERROR com.cisco.api.external.rest.common.resource.ContainerServerResource - **Invalid IP Address**
TCAT: 02-02 15:34:33 APIException:Invalid IP Address
```

## Authors

Oliver Kaiser (oliver.kaiser@outlook.com)

## License

GNU General Public License v3.0 or later.

See [LICENSE](LICENSE) for the full text.


